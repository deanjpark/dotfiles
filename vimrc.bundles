call plug#begin('~/.vim/plugged')

" text editing
Plug 'tpope/vim-surround'                               " better brackets
Plug 'scrooloose/syntastic'                             " check syntax
Plug 'tpope/vim-commentary'                             " comments
Plug 'tpope/vim-repeat'                                 " repeat more commands with '.'
Plug 'terryma/vim-multiple-cursors'                     " multiple cursors like in ST
Plug 'Valloric/YouCompleteMe', { 'on': [] }             " autocomplete
Plug 'jiangmiao/auto-pairs', { 'on': [] }               " closing brackets
Plug 'terryma/vim-expand-region'                        " change visual selection by using '+' / '-'

" navigation
Plug 'scrooloose/nerdtree'                              " file tree
Plug 'dyng/ctrlsf.vim'                                  " better text search
Plug 'kopischke/vim-fetch'                              " open file with line and column number
Plug 'yegappan/mru'                                     " most recently used files
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' } " fuzzy search
Plug 'exaspark/vim-open-alternate', { 'branch': 'ruby_lib' }      " open RSpec files

" theme
Plug 'w0ng/vim-hybrid'                                  " theme
Plug 'bling/vim-airline'                                " status line

" files
Plug 'tpope/vim-eunuch'                                 " helpers for UNIX shell commands (mkdir, rename, etc.)

" git
Plug 'tpope/vim-fugitive'                               " git commands
Plug 'airblade/vim-gitgutter'                           " git gutter

" ruby / rails
Plug 'vim-ruby/vim-ruby', { 'for': 'ruby' }             " ruby
Plug 'tpope/vim-endwise', { 'for': 'ruby' }             " auto end keyword
Plug 'thoughtbot/vim-rspec', { 'for': 'ruby' }          " run rspec

" clojure
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }        " repl

" syntaxes and languages
Plug 'slim-template/vim-slim', { 'for': 'slim' }        " slim
Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }    " coffee script
Plug 'suan/vim-instant-markdown', { 'for': 'markdown' } " real time markdown editing

call plug#end()

" theme
color hybrid

" call MRU plugin with Alt + r
nnoremap ® :MRU<CR>

" open nerdtree
map <leader><leader> :NERDTreeToggle<CR>
" open current file's path
map <leader>c :NERDTreeFind<CR>

" search with CtrlSF
nnoremap <C-f> "_:CtrlSF 

" jump to defenition with fireplace
nnoremap <C-[><C-[> [<C-d>

" vim-rspec
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>

nnoremap <Leader>o :OpenAlternate<CR>

" run FZF by using Alt + P
nnoremap π "_:FZF<CR>

" CtrlSF
let g:ctrlsf_case_sensitive = 'no'
let g:ctrlsf_position = 'bottom'
if executable('ag')
  let g:ctrlsf_ackprg = 'ag' " use The Silver Searcher https://github.com/ggreer/the_silver_searcher
endif

" autocomplete
let g:ycm_min_num_of_chars_for_completion = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_complete_in_comments = 1

" load YouCompleteMe and auto-pairs only after entering into insert mode, not while starting vim
augroup lazy_load
  autocmd!
  autocmd! InsertEnter * call plug#load('YouCompleteMe', 'auto-pairs')
                      \| if exists('g:loaded_youcompleteme')
                      \|   call youcompleteme#Enable()
                      \| endif
                      \| call AutoPairsTryInit()
                      \| autocmd! lazy_load
augroup END

" status line
let g:airline#extensions#tabline#enabled = 1

" multiple cursors
let g:multi_cursor_start_key='<C-n>'
let g:multi_cursor_start_word_key='g<C-n>'

" markdown preview
let g:instant_markdown_slow = 1

" rspec command
let g:rspec_command = "!rr {spec}"
